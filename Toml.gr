module Toml
include "string"
include "array"
include "list"
include "char"
include "number"
include "bytes"
// TODO: Use Err, instead of fail
// TODO: Get Rid Of Lexer, Merge With parser
// Type
enum LexerToken {
  // Fully Matched
  LexedBasicString(String),
  LexedBasicMultiLineString(String),
  LexedLiteralString(String),
  LexedLiteralMultiLineString(String),
  LexedBool(Bool),
  // TODO: LexedNumeric(String, CanBeFloat, CanBeDate)
  // Unmatched
  // TODO: Consider Changing This To Literal(List<String>)
  Literal(List<Char>),
  Eq,
  Sbo,
  Cbo,
  Sbc,
  Cbc,
  LineBreak,
  CarriageReturn,
  BackSlash,
  Comma,
}
provide enum TomlValue {
  TomlString(String),
  TomlInt(Number),
  TomlFloat(Number),
  TomlBool(Bool),
  TomlDateTime(String, String),
  TomlDate(String),
  TomlTime(String),
  TomlTable(List<(String, TomlValue)>),
  TomlArray(List<TomlValue>),
}
// TODO: Rewrite This To Be Simple
let escapeString = (str, isBasic, isMultiLine) => {
  // Normalize Line Ending
  let mut normalStr = ""
  let mut str = List.reverse(str)
  while (true) {
    match (str) {
      // Handle Quick Escape Sequences
      [ '\r', '\n', ...rest ] => {
        normalStr = normalStr ++ "\n"
        str = rest
      },
      // Normal Chars
      [ item, ...rest ] => {
        normalStr = normalStr ++ Char.toString(item)
        str = rest
      },
      [] => break
    }
  }
  // Trim
  let mut escapedStr = ""
  let mut str = Array.toList(String.explode(normalStr))
  // Handle Trimming
  if (isMultiLine) {
    match (str) {
      [ '\n', ...rest ] => str = rest,
      _ => void
    }
  }
  // Handle Trimming
  if (isBasic && isMultiLine) {
    let mut tempStr = str
    str = []
    while (true) {
      match (tempStr) {
        [ '\\', '\\', ...rest] => {
          str = [ '\\', '\\', ...str ]
          tempStr = rest
        },
        [ '\\', ...rest ] => {
          let mut tempBuffer = rest
          let mut tempRest = rest
          let mut isNewLine = false
          while (true) {
            match (tempRest) {
              [ '\n', ...rest ] => {
                isNewLine = true
                tempRest = rest
              },
              [ ' ', ...rest ] => {
                tempBuffer = [ ' ', ...tempBuffer ]
                tempRest = rest
              },
              [ '\t', ...rest ] => {
                tempBuffer = [ '\t', ...tempBuffer ]
                tempRest = rest
              },
              [ n, ...rest ] => {
                // If Not Is NewLine
                if (isNewLine) {
                  tempStr = [ n, ...rest ]
                } else {
                  str = [ '\\', ...str ]
                  tempStr = tempBuffer
                }
                break
              },
              [] => {
                tempStr = []
                break
              }
            }
          }
        },
        [ item, ...rest ] => {
          str = [ item, ...str ]
          tempStr = rest
        },
        [] => break
      }
    }
    str = List.reverse(str)
  }
  // Handle Escaping
  while (true) {
    match (str) {
      // Handle Quick Escape Sequences
      [ '\\', 'b', ...rest ] when isBasic => { // Backspace
        escapedStr = escapedStr ++ "\u0008"
        str = rest
      },
      [ '\\', 't', ...rest ] when isBasic => { // Tab
        escapedStr = escapedStr ++ "\u0009"
        str = rest
      },
      [ '\\', 'n', ...rest ] when isBasic => { // LineFeed
        escapedStr = escapedStr ++ "\u000A"
        str = rest
      },
      [ '\\', 'f', ...rest ] when isBasic => { // FormFeed
        escapedStr = escapedStr ++ "\u000C"
        str = rest
      },
      [ '\\', 'r', ...rest ] when isBasic => { // Carriage Return
        escapedStr = escapedStr ++ "\u000D"
        str = rest
      },
      [ '\\', 'e', ...rest ] when isBasic => { // Escape
        escapedStr = escapedStr ++ "\u001B"
        str = rest
      },
      [ '\\', '"', ...rest ] when isBasic => { // Double Quote
        escapedStr = escapedStr ++ "\u0022"
        str = rest
      },
      [ '\\', '\\', ...rest ] when isBasic => { // BackSlash
        escapedStr = escapedStr ++ "\u005C"
        str = rest
      },
      // Unicode Escape Sequences
      [ '\\', 'x', d0, d1, ...rest] when isBasic => {
        let s = String.implode([> d0, d1 ])
        let i = Number.parseInt(s, 16)
        match (i) {
          Ok (i) => escapedStr = escapedStr ++ Char.toString(Char.fromCode(i)),
          Err(_) => fail "TOML: Invalid Unicode Escape Sequence"
        }
        str = rest
      },
      [ '\\', 'u', d0, d1, d2, d3, ...rest] when isBasic => {
        let s = String.implode([> d0, d1, d2, d3 ])
        let i = Number.parseInt(s, 16)
        match (i) {
          Ok (i) => escapedStr = escapedStr ++ Char.toString(Char.fromCode(i)),
          Err(_) => fail "TOML: Invalid Unicode Escape Sequence"
        }
        str = rest
      },
      [ '\\', 'U', d0, d1, d2, d3, d4, d5, d6, d7, ...rest] when isBasic => {
        let s = String.implode([> d0, d1, d2, d3, d4, d5, d6, d7 ])
        let i = Number.parseInt(s, 16)
        match (i) {
          Ok (i) => escapedStr = escapedStr ++ Char.toString(Char.fromCode(i)),
          Err(_) => fail "TOML: Invalid Unicode Escape Sequence"
        }
        str = rest
      },
      // Normal Chars
      [ item, ...rest ] => {
        escapedStr = escapedStr ++ Char.toString(item)
        str = rest
      },
      [] => break
    }
  }
  // return escaped string
  escapedStr
}
// Lex
let lexToml = (inputStr) => {
  let mut lexemes = []
  let mut buffer = Array.toList(String.explode(inputStr))
  let mut builtLiteral = []
  while (true) {
    let mut didHitItem = true
    let mut canBreak = false
    let mut scopeLexemes = []
    match (buffer) {
      // Done Parsing
      [] => canBreak = true,
      // WhiteSpace
      [ ' ', ...rest ] | [ '\t', ...rest ] => buffer = rest,
      [ '#', ...rest ] => {
        buffer = rest
        while (true) {
          match (buffer) {
            [ '\n', ...rest ] => break,
            [ item, ...rest ] => buffer = rest,
            [] => break
          }
        }
      },
      // Strings
      [ '"', '"', '"', ...rest ] => {
        buffer = rest
        let mut builtStr = []
        while (true) {
          match (buffer) {
            [ '"', '"', '"', ...rest ] => {
              buffer = rest
              break
            },
            [ '\\', '"', ...rest ] => {
              buffer = rest
              builtStr = [ '"', '\\', ...builtStr ]
            },
            [ '\\', '\\', ...rest ] => {
              buffer = rest
              builtStr = [ '\\', '\\', ...builtStr ]
            },
            [ item, ...rest ] => {
              buffer = rest
              builtStr = [ item, ...builtStr ]
            },
            [] => fail "Invalid Toml Multi-line Basic String"
          }
        }
        scopeLexemes = [ LexedBasicMultiLineString(escapeString(builtStr, true, true)), ...scopeLexemes ]
      },
      [ '"', ...rest ] => {
        buffer = rest
        let mut builtStr = []
        while (true) {
          match (buffer) {
            [ '"', ...rest ] => {
              buffer = rest
              break
            },
            [ '\\', '"', ...rest ] => {
              buffer = rest
              builtStr = [ '"', '\\',  ...builtStr ]
            },
            [ '\\', '\\', ...rest ] => {
              buffer = rest
              builtStr = [ '\\', '\\', ...builtStr ]
            },
            [ item, ...rest ] => {
              buffer = rest
              builtStr = [ item, ...builtStr ]
            },
            [] => fail "Invalid Toml Basic String"
          }
        }
        scopeLexemes = [ LexedBasicString(escapeString(builtStr, true, false)), ...scopeLexemes ]
      },
      [ '\'', '\'', '\'', ...rest ] => {
        buffer = rest
        let mut builtStr = []
        while (true) {
          match (buffer) {
            [ '\'', '\'', '\'', ...rest ] => {
              buffer = rest
              break
            },
            [ item, ...rest ] => {
              buffer = rest
              builtStr = [ item, ...builtStr ]
            },
            [] => fail "Invalid Toml Multi-line Literal String"
          }
        }
        scopeLexemes = [ LexedLiteralMultiLineString(escapeString(builtStr, false, true)), ...scopeLexemes ]
      },
      [ '\'', ...rest ] => {
        buffer = rest
        let mut builtStr = []
        while (true) {
          match (buffer) {
            [ '\'', ...rest ] => {
              buffer = rest
              break
            },
            [ item, ...rest ] => {
              buffer = rest
              builtStr = [ item, ...builtStr ]
            },
            [] => fail "Invalid Toml Literal String"
          }
        }
        scopeLexemes = [ LexedLiteralString(escapeString(builtStr, false, false)), ...scopeLexemes ]
      },
      // Boolean
      [ 't', 'r', 'u', 'e', ...rest ] => {
        buffer = rest
        scopeLexemes = [ LexedBool(true), ...scopeLexemes ]
      },
      [ 'f', 'a', 'l', 's', 'e', ...rest ] => {
        buffer = rest
        scopeLexemes = [ LexedBool(false), ...scopeLexemes ]
      },
      // Line Breaks
      [ '\n', ...rest ] | [ '\r', '\n', ...rest ] => {
        buffer = rest
        scopeLexemes = [ LineBreak, ...scopeLexemes ]
      },
      [ '\r', ...rest ] => {
        buffer = rest
        scopeLexemes = [ CarriageReturn, ...scopeLexemes ]
      },
      // Symbols
      [ '=', ...rest ] => {
        buffer = rest
        scopeLexemes = [ Eq, ...scopeLexemes ]
      },
      [ '[', ...rest ] => {
        buffer = rest
        scopeLexemes = [ Sbo, ...scopeLexemes ]
      },
      [ ']', ...rest ] => {
        buffer = rest
        scopeLexemes = [ Sbc, ...scopeLexemes ]
      },
      [ '{', ...rest ] => {
        buffer = rest
        scopeLexemes = [ Cbo, ...scopeLexemes ]
      },
      [ '}', ...rest ] => {
        buffer = rest
        scopeLexemes = [ Cbc, ...scopeLexemes ]
      },
      [ ',', ...rest ] => {
        buffer = rest
        scopeLexemes = [ Comma, ...scopeLexemes ]
      },
      [ '\\', ...rest ] => {
        buffer = rest
        scopeLexemes = [ BackSlash, ...scopeLexemes ]
      },
      // Unknown Text
      [ item, ...rest ] => {
        buffer = rest
        didHitItem = false
        builtLiteral = [ item, ...builtLiteral ]
      }
    }
    if (didHitItem && List.length(builtLiteral) != 0) {
      // TODO: Make Literal Take A List
      lexemes = [ Literal(List.reverse(builtLiteral)), ...lexemes ]
      builtLiteral = []
    }
    lexemes = List.append(scopeLexemes, lexemes)
    if (canBreak) break
  }
  List.reverse(lexemes)
}
// Parser
let isFloat = (chars) => {
  // TODO: Validate This
  // Allow +, -
  let lst = match (chars) {
    [ '+', ...rest ] | [ '-', ...rest ] => rest,
    _ => chars
  }
  match (lst) {
    [ 'n', 'a', 'n' ] => return true,
    [ 'i', 'n', 'f' ] => return true,
    _ => void
  }
  // Validation
  if (!List.contains('.', lst) && !List.contains('e', lst) && !List.contains('E', lst)) return false
  let mut lastChar = '_'
  let mut index = 0
  let lstLen = List.length(lst)
  let mut chosenStyle = 0
  let mut resetStyle = false
  return List.every((char) => {
    index += 1
    let charCode = Char.code(char)
    if (resetStyle && chosenStyle == 2) {
      if (char == '+' || char == '-') return true
    }
    resetStyle = false
    if (lastChar == '_' && char == '_') return false
    if (lstLen == index && char == '_') return false
    if (char == '_') return true
    lastChar = char
    // Integers
    if (charCode >= Char.code('0') && charCode <= Char.code('9')) return true
    // Decimal Or Exponent
    if (lstLen == index && char == '.') return false
    if (lstLen == index && char == 'e') return false
    if (lstLen == index && char == 'E') return false
    if (chosenStyle == 0) {
      if (char == '.') {
        chosenStyle = 1
        resetStyle = true
        if (lastChar == '_') return false
        lastChar = '_'
        return true
      }
    } else {
      if (char == '.') return false
    }
    if (chosenStyle == 0 || chosenStyle == 1) {
      if (char == 'e' || char == 'E') {
        chosenStyle = 2
        resetStyle = true
        if (lastChar == '_') return false
        lastChar = '_'
        return true
      }
    } else {
      if (char == 'e') return false
      if (char == 'E') return false
    }
    // Otherwise False
    return false
  }, lst)
}
let isNumber = (chars) => {
  // TODO: Validate This
  let lst = chars
  // Allow +, -
  let mut posSign = false
  let lst = match (lst) {
    [ '+', ...rest ] => {
      posSign = true
      rest
    },
    [ '-', ...rest ] => rest,
    _ => lst
  }
  // Match Type
  let mut numberRadix = 10
  let lst = match (lst) {
    // Hex
    [ '0', 'x', ...rest ] |
    [ '0', 'X', ...rest ] => {
      numberRadix = 16
      rest
    },
    // Octal
    [ '0', 'o', ...rest ] |
    [ '0', 'O', ...rest ] => {
      numberRadix = 8
      rest
    },
    // Binary
    [ '0', 'b', ...rest ] |
    [ '0', 'B', ...rest ] => {
      numberRadix = 2
      rest
    },
    // Rest
    _ => lst
  }
  if (posSign && numberRadix != 10) return false
  // Validation
  let mut lastChar = '_'
  let mut index = 0
  let lstLen = List.length(lst)
  return List.every((char) => {
    index += 1
    let charCode = Char.code(char)
    if (lastChar == '_' && char == '_') return false
    if (lstLen == index && char == '_') return false
    if (char == '_') return true
    lastChar = char
    if (numberRadix == 10) {
      if (charCode >= Char.code('0') && charCode <= Char.code('9')) return true
    } else if (numberRadix == 16) {
      if (charCode >= Char.code('0') && charCode <= Char.code('9')) return true
      else if (charCode >= Char.code('A') && charCode <= Char.code('Z')) return true
      else if (charCode >= Char.code('a') && charCode <= Char.code('z')) return true
    } else if (numberRadix == 8) {
      if (charCode >= Char.code('0') && charCode <= Char.code('7')) return true
    } else if (numberRadix == 2) {
      if (char == '0' || char == '1') return true
    }
    return false
  }, lst)
}
// Handle Keys
// TODO: Rewrite All This Completely
let isValidKeyChar = (keyChar) => {
  let charCode = Char.code(keyChar)
  // Digits
  if (charCode >= Char.code('0') && charCode <= Char.code('9')) return true
  // Alphabetical
  if (charCode >= Char.code('a') && charCode <= Char.code('z')) return true
  if (charCode >= Char.code('A') && charCode <= Char.code('Z')) return true
  // Symbols
  if (keyChar == '-' || keyChar == '_') return true
  // TODO: Determine what other characters are valid
  // Invalid
  return false
}
let parseTableOrNameKey = (rawKeyLexemes) => {
  if (List.length(rawKeyLexemes) == 0) fail "Invalid Toml Key"
  // Break Apart By Dot
  let mut rawKeyLexemes = rawKeyLexemes
  let mut keyLexemes  = []
  while (true) {
    match (rawKeyLexemes) {
      [ Literal(chars), ...rest ]=> {
        rawKeyLexemes = rest
        // Split by Dots
        let mut keyBuf = []
        let mut chars = chars
        while (true) {
          match (chars) {
            [ '.', ...rest ]=> {
              chars = rest
              if (List.length(keyBuf) > 0)
                keyLexemes = [ Literal(List.reverse(keyBuf)), ...keyLexemes ]
              keyLexemes = [ Literal(['.']), ...keyLexemes ]
              keyBuf = []
            },
            [ item, ...rest ] => {
              chars = rest
              keyBuf = [item, ...keyBuf ]
            },
            [] => break
          }
        }
        if (List.length(keyBuf) > 0) keyLexemes = [ Literal(List.reverse(keyBuf)), ...keyLexemes ]
      },
      [item, ...rest] => {
        rawKeyLexemes = rest
        keyLexemes = [ item, ...keyLexemes ]
      },
      [] => break
    }
  }
  let mut keyLexemes = List.reverse(keyLexemes)
  // Build Key Path
  let mut keyPath = []
  let mut keyBuffer = ""
  // Create KeyPath
  let mut lastItemDot = true
  List.forEach((rawKeyLexeme) => {
    // Validate
    let mut matchedDot = false
    match (rawKeyLexeme) {
      LexedBasicString(txt) | LexedLiteralString(txt) => {
        if (!lastItemDot) fail "Invalid Toml Key"
        keyBuffer = keyBuffer ++ txt
      },
      LexedBool(true) => {
        if (!lastItemDot) fail "Invalid Toml Key"
        keyBuffer = keyBuffer ++ "true"
      },
      LexedBool(false) => {
        if (!lastItemDot) fail "Invalid Toml Key"
        keyBuffer = keyBuffer ++ "false"
      },
      Literal(['.']) => {
        if (lastItemDot) fail "Invalid Toml Key"
        matchedDot = true
        keyPath = [ keyBuffer, ...keyPath]
        keyBuffer = ""
      },
      Literal(chars) => {
        // Validate
        List.forEach((char) => {
          if (!isValidKeyChar(char)) fail "Invalid Toml Key"
          keyBuffer = keyBuffer ++ Char.toString(char)
        }, chars)
      },
      // Invalid
      _ => fail "Invalid Toml Key",
    }
    lastItemDot = matchedDot
  }, keyLexemes)
  // Append The Last Key Buffer
  if (String.byteLength(keyBuffer) > 0)
    keyPath = [ keyBuffer, ...keyPath]
  // Return The KeyPath
  List.reverse(keyPath)
}
let rec writeTable = (rootTable, keyPath, value) => {
  // TODO: Rewrite This Completely
  // TODO: Validate This
  match (keyPath) {
    [ pathItem ] => match (rootTable) {
      TomlTable(tableContents) => {
        let hasKeyPath = List.some(((keyName, _)) => keyName == pathItem, tableContents)
        // If Value Is A Table Or Array Merge
        if (hasKeyPath) {
          let mut hasFoundItem = false
          TomlTable((List.map(((keyName, keyValue)) => {
            if (!hasFoundItem && keyName == pathItem) {
              hasFoundItem = true
              match (keyValue) {
                TomlTable(contents) => {
                  match (value) {
                    TomlTable(newContents) => {
                      (keyName, TomlTable(List.append(contents, newContents)))
                    },
                    _ => fail "Invalid Toml Table Write"
                  }
                },
                _ => fail "Invalid Toml Table Write"
              }
            } else (keyName, keyValue)
          }, tableContents)))
        } else {
          // Search Table
          TomlTable(List.append(tableContents, [ (pathItem, value) ]))
        }
      },
      _ => fail "Invalid Toml Array Write"
    },
    [ pathItem, ...rest ] => match (rootTable) {
      TomlTable(tableContents) => {
        // Search Table
        let hasSubTable = List.some(((keyName, _)) => keyName == pathItem, tableContents)
        match (hasSubTable) {
          true => {
            let mut hasWritten = false
            TomlTable(List.map(((keyName, keyValue)) => {
              if (keyName == pathItem && !hasWritten) {
                hasWritten = true
                (keyName, writeTable(keyValue, rest, value))
              } else (keyName, keyValue)
            }, tableContents))
          },
          false => {
            TomlTable(List.append(tableContents, [ (pathItem, writeTable(TomlTable([]), rest, value)) ]))
          }
        }
      },
      _ => fail "Invalid Toml Array Write"
    },
    [] => fail "Empty KeyPath"
  }
}
// Parsers
let rec parseValue = (buffer) => {
  match (buffer) {
    // Objects
    // Inline-Table
    [ Cbo, ...rest ] => {
      let mut buffer = rest
      // Parse Values
      let mut canDoAnother = true
      let mut rootTable = TomlTable([])
      while (true) {
        match (buffer) {
          [ LineBreak, ...rest ] => {
            buffer = rest
          },
          [ Comma, ...rest ] => {
            buffer = rest
            canDoAnother = true
          },
          [ Cbc, ...rest ] => {
            buffer = rest
            break
          },
          // TODO: Handle Keys With Strings
          _ => {
            canDoAnother = false
            // Parse Key
            let mut keyTokens = []
            while (true) {
              match (buffer) {
                [ Eq, ...rest ] => {
                  buffer = rest
                  break
                },
                [item, ...rest] => {
                  buffer = rest
                  keyTokens = [item, ...keyTokens]
                },
                [] => fail "Invalid Toml Inline Table"
              }
            }
            // Parse Key
            let valueKey = parseTableOrNameKey(List.reverse(keyTokens))
            // Parse Value
            let (value, rest) = parseValue(buffer)
            buffer = rest
            // Write To Current Table
            rootTable = writeTable(rootTable, valueKey, value)
          }
        }
      }
      (rootTable, buffer)
    },
    // Inline-Array
    [ Sbo, ...rest ] => {
      let mut buffer = rest
      let mut values = []
      // Parse Values
      let mut canDoAnother = true
      while (true) {
        match (buffer) {
          [ LineBreak, ...rest ] => {
            buffer = rest
          },
          [ Comma, ...rest ] => {
            buffer = rest
            canDoAnother = true
          },
          [ Sbc, ...rest ] => {
            buffer = rest
            break
          },
          _ when canDoAnother => {
            canDoAnother = false
            let (value, rest) = parseValue(buffer)
            buffer = rest
            values = [ value, ...values]
          },
          // Invalid
          _ => fail "Invalid Toml Array"
        }
      }
      (TomlArray(List.reverse(values)), buffer)
    },
    // Strings
    [ LexedLiteralString(literal), ...rest ] => (TomlString(literal), rest),
    [ LexedLiteralMultiLineString(literal), ...rest ] => (TomlString(literal), rest),
    [ LexedBasicString(literal), ...rest ] => (TomlString(literal), rest),
    [ LexedBasicMultiLineString(literal), ...rest ] => (TomlString(literal), rest),
    // Parse Literals
    [LexedBool(bool), ...rest ] => (TomlBool(bool), rest),
    // TODO: DateTime
    // Float
    [Literal(float),...rest] when isFloat(float) => {
      match (Number.parseFloat(String.implode(Array.fromList(float)))) {
        Ok(float) => (TomlFloat(float), rest),
        Err(_) => fail "Invalid Toml Float"
      }
    },
    // Number
    [Literal(int),...rest] when isNumber(int) => {
      let int = match (int) {
        [ '+', ...rest ] => String.implode(Array.fromList(rest)),
        _ => String.implode(Array.fromList(int)),
      }
      match (Number.parseInt(int, 10)) {
        Ok(int) => (TomlInt(int), rest),
        Err(_) => fail "Invalid Toml Integer"
      }
    },
    // Unknown
    _ => fail "Unknown Value"
  }
}
// Public Api
provide let fromString = (str) => {
  // Lex
  let mut buffer = lexToml(str)
  // Parse
  let mut keyPath = []
  let mut rootTable = TomlTable([])
  while (true) {
    // Expressions
    // TODO: Handle Proper Validation
    match (buffer) {
      // Break On Empty
      [] => break,
      // Table Array
      [ Sbo, Sbo, ...rest ] => {
        buffer = rest
        // Parse Key
        let mut keyTokens = []
        while (true) {
          match (buffer) {
            [] => fail "Invalid Toml",
            [ Sbc, Sbc, ...rest ] => {
              buffer = rest
              break
            },
            [item, ...rest] => {
              buffer = rest
              keyTokens = [item, ...keyTokens]
            }
          }
        }
        // Parse Key
        keyPath = parseTableOrNameKey(List.reverse(keyTokens))
        // Write Current Table
        rootTable = writeTable(rootTable, keyPath, TomlArray([]))
        // TODO: Handle Writing To Arrays
      },
      // Table
      [ Sbo, ...rest ] => {
        buffer = rest
        // Parse Key
        let mut keyTokens = []
        while (true) {
          match (buffer) {
            [ Sbc, ...rest ] => {
              buffer = rest
              break
            },
            [item, ...rest] => {
              buffer = rest
              keyTokens = [item, ...keyTokens]
            },
            [] => fail "Invalid Toml"
          }
        }
        // Parse Key
        keyPath = parseTableOrNameKey(List.reverse(keyTokens))
        // Write To Current Table
        rootTable = writeTable(rootTable, keyPath, TomlTable([]))
      },
      // Line Break
      [ LineBreak, LineBreak, ...rest ] => {
        buffer = rest
        // Reset Current Table Name
        keyPath = []
      },
      [ LineBreak, ...rest ] => buffer = rest,
      // Key Value
      _ => {
        // Parse Key
        let mut keyTokens = []
        while (true) {
          match (buffer) {
            [ Eq, ...rest ] => {
              buffer = rest
              break
            },
            [item, ...rest] => {
              buffer = rest
              keyTokens = [item, ...keyTokens]
            },
            [] => fail "Invalid Toml"
          }
        }
        // Parse Key
        let valueKey = parseTableOrNameKey(List.reverse(keyTokens))
        // Parse Value
        let (value, rest) = parseValue(buffer)
        buffer = rest
        // Write To Current Table
        rootTable = writeTable(rootTable, List.append(keyPath, valueKey), value)
      }
    }
  }
  // Return Parsed
  Ok(rootTable)
}
